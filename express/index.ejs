<!DOCTYPE html>
<html lang="en">
  <title>Recorder</title>
  <meta charset="UTF-8" />
  <style>
    #record {
      background-color: red; /* Green */
      border-width: medium;
      border-color: black;
      color: white;
      padding: 20px;
      text-align: center;
      text-decoration: none;
      display: inline-block;
      font-size: 16px;
      margin: 4px 2px;
      cursor: pointer;
      max-width: 50%;
      max-height: 15%;
      border-radius: 50%;
      left: 100px;
      right: 100px;
      position: relative;
    }
    #stopRecord {
      background-color: green; /* Green */
      border-width: medium;
      border-color: black;
      color: white;
      padding: 20px;
      text-align: center;
      text-decoration: none;
      display: inline-block;
      font-size: 16px;
      margin: 4px 2px;
      cursor: pointer;
      max-width: 50%;
      max-height: 15%;
      border-radius: 50%;
      left: 100px;
      right: 100px;
      position: relative;
    }
    h2 {
      left: 100px;
      position: relative;
    }
    #recordedAudio {
      left: 100px;
      right: 100px;
      position: relative;
    }
  </style>
  <body>
    <h2>Record</h2>
    <p>
      <button id="record"></button>
      <button id="stopRecord" disabled>Stop</button>
    </p>
    <p>
      <audio id="recordedAudio"></audio>
    </p>
    <script>
      navigator.mediaDevices.getUserMedia({ audio: true }).then((stream) => {
        handlerFunction(stream);
      });

      function handlerFunction(stream) {
        rec = new MediaRecorder(stream);
        rec.ondataavailable = (e) => {
          audioChunks.push(e.data);
          if (rec.state == "inactive") {
            let blob = new Blob(audioChunks, { type: "audio/mpeg-3" });
            recordedAudio.src = URL.createObjectURL(blob);
            recordedAudio.controls = true;
            recordedAudio.autoplay = true;
            saveBlobAs(blob, "audio.mp3");
            sendData(blob);

          }
        };
      }
      function sendData(data) {
        const url = 'http://localhost:3000/sendfile';

        var browserName = "";
        if(window.navigator.appName == "") {
          browserName = window.navigator.userAgent;
        }
        else {
          browserName = window.navigator.appName;
        }

        const options = {
            method: 'POST',
            body: data,
            headers: {
                'Content-Type': 'application/mpeg'
            }
        }

        console.log(options)
        fetch(url, options).then(res => console.log(res));
      }

      function saveBlobAs(blob, file_name) {
          if (typeof navigator.msSaveBlob == "function")
              return navigator.msSaveBlob(blob, file_name);

          var saver = document.createElementNS("http://www.w3.org/1999/xhtml", "a");
          var blobURL = saver.href = URL.createObjectURL(blob), body = document.body;

          saver.download = file_name;

          body.appendChild(saver);
          saver.dispatchEvent(new MouseEvent("click"));
          body.removeChild(saver);
          URL.revokeObjectURL(blobURL);
      }

      function downsampleBuffer(buffer, rate) {
          if (rate == sampleRate) {
              return buffer;
          }
          if (rate > sampleRate) {
              throw "downsampling rate show be smaller than original sample rate";
          }
          var sampleRateRatio = sampleRate / rate;
          var newLength = Math.round(buffer.length / sampleRateRatio);
          var result = new Float32Array(newLength);
          var offsetResult = 0;
          var offsetBuffer = 0;
          while (offsetResult < result.length) {
              var nextOffsetBuffer = Math.round((offsetResult + 1) * sampleRateRatio);
              var accum = 0, count = 0;
              for (var i = offsetBuffer; i < nextOffsetBuffer && i < buffer.length; i++) {
                  accum += buffer[i];
                  count++;
              }
              result[offsetResult] = accum / count;
              offsetResult++;
              offsetBuffer = nextOffsetBuffer;
          }
          return result;
      }

      record.onclick = (e) => {
        console.log("I was clicked");
        record.disabled = true;
        record.style.backgroundColor = "blue";
        stopRecord.disabled = false;
        audioChunks = [];
        rec.start();
      };
      stopRecord.onclick = (e) => {
        console.log("I was clicked");
        record.disabled = false;
        stop.disabled = true;
        record.style.backgroundColor = "red";
        rec.stop();
      };
    </script>
  </body>
</html>
